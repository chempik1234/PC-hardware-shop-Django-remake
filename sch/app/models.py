from django.db import models
import os
from django.contrib.auth.models import User


# class Person(models.Model):
#     # user = models.OneToOneField(User, on_delete=models.CASCADE)
#     surname = models.CharField(null=True,max_length=150)
#     name = models.CharField(null=True,max_length=150)
#     email = models.EmailField(null=True,max_length=254)
#     hashed_password = models.CharField(null=True,max_length=128)
#     modified_date = models.DateTimeField(null=True,)
#
#     # def check_password(self, password):
#     #     return password == self.hashed_password


class CPU(models.Model):
    warranty = models.IntegerField(null=True,)
    country = models.CharField(null=True,max_length=200)
    title = models.CharField(null=True,max_length=200)
    generation = models.CharField(null=True,max_length=200)
    year = models.IntegerField(null=True,)
    # sockets = orm.relation("Sockets",
    #                        secondary="association",
    #                        backref="cpu")
    socket = models.CharField(null=True,max_length=200)
    has_cooling = models.BooleanField(null=True,)
    term_interface = models.BooleanField(null=True,)
    cores = models.IntegerField(null=True,)
    threads = models.IntegerField(null=True,)
    tech_process = models.IntegerField(null=True,)
    core = models.CharField(null=True,max_length=200)
    cash_l1_instructions_bits = models.IntegerField(null=True,)
    cash_l1_data_bits = models.IntegerField(null=True,)
    cash_l2_bits = models.IntegerField(null=True,)
    cash_l3_bits = models.IntegerField(null=True,)
    base_freq = models.IntegerField(null=True,)
    max_freq = models.IntegerField(null=True,)
    free_mult = models.BooleanField(null=True,)
    memory = models.CharField(null=True,max_length=200)
    max_mem_bits = models.IntegerField(null=True,)
    channels = models.IntegerField(null=True,)
    min_RAM_freq = models.IntegerField(null=True,)
    max_RAM_freq = models.IntegerField(null=True,)
    ECC = models.IntegerField(null=True,)
    TDP = models.IntegerField(null=True,)
    custom_TDP = models.IntegerField(null=True,)
    max_temp = models.IntegerField(null=True,)
    has_graphics = models.IntegerField(null=True,)
    PCI = models.CharField(null=True,max_length=200)
    PCI_amount = models.IntegerField(null=True,)
    bandwidth = models.FloatField(null=True,)
    support_x64 = models.CharField(null=True,max_length=200)
    multi_thread = models.BooleanField(null=True,)
    add_freq_tech = models.CharField(null=True,max_length=200)
    energy_save_tech = models.CharField(null=True,max_length=200)
    description = models.CharField(null=True,max_length=200)
    price = models.IntegerField(null=True,)
    rating = models.IntegerField(null=True,)
    rates = models.IntegerField(null=True,)


class GPU(models.Model):
    warranty = models.CharField(null=True,max_length=200)
    country = models.CharField(null=True,max_length=200)
    title = models.CharField(null=True,max_length=200)
    year = models.IntegerField(null=True,)
    manufacturer_code = models.CharField(null=True,max_length=200)
    is_for_mining = models.BooleanField(null=True,)
    LHR = models.BooleanField(null=True,)
    memory = models.IntegerField(null=True,)
    memory_type = models.IntegerField(null=True,)
    bandwidth = models.FloatField(null=True,)
    band_64x_32x = models.CharField(null=True,max_length=200)
    max_mem_bandwidth = models.FloatField(null=True,)
    micro_arc = models.CharField(null=True,max_length=200)
    graph_cpu = models.CharField(null=True,max_length=200)
    techprocess = models.IntegerField(null=True,)
    chip_freq = models.IntegerField(null=True,)
    ALU = models.IntegerField(null=True,)
    texture_blocks = models.IntegerField(null=True,)
    raster_blocks = models.IntegerField(null=True,)
    max_temp = models.IntegerField(null=True,)
    RTX = models.BooleanField(null=True,)
    appart_accelerate_RT = models.BooleanField(null=True,)
    tenz_cores = models.IntegerField(null=True,)
    max_efficiency_FP32 = models.FloatField(null=True,)
    connectors = models.CharField(null=True,max_length=200)
    HDMI_version = models.CharField(null=True,max_length=200)
    max_resolution = models.CharField(null=True,max_length=200)
    max_monitors = models.IntegerField(null=True,)
    connection_interface = models.CharField(null=True,max_length=200)
    PCI_version = models.CharField(null=True,max_length=200)
    support_mult_cpu_config = models.CharField(null=True,max_length=200)
    need_extra_power = models.BooleanField(null=True,)
    extra_power_connections = models.BooleanField(null=True,)
    max_consuming_power = models.FloatField(null=True,)
    recommended_power = models.IntegerField(null=True,)
    cooling = models.CharField(null=True,max_length=200)
    type_and_amount_fans = models.CharField(null=True,max_length=200)
    fan_speed_control = models.BooleanField(null=True,)
    low_profile = models.BooleanField(null=True,)
    needed_slots = models.IntegerField(null=True,)
    length = models.IntegerField(null=True,)
    width = models.IntegerField(null=True,)
    weight = models.IntegerField(null=True,)
    illumination = models.BooleanField(null=True,)
    synch_RGB = models.BooleanField(null=True,)
    LCD = models.BooleanField(null=True,)
    BIOS_switch = models.BooleanField(null=True,)
    description = models.CharField(null=True,max_length=200)
    price = models.IntegerField(null=True,)
    rating = models.IntegerField(null=True,)
    rates = models.IntegerField(null=True,)


class Motherboard(models.Model):
    warranty = models.CharField(null=True,max_length=200)
    country = models.CharField(null=True,max_length=200)
    title = models.CharField(null=True,max_length=200)
    year = models.IntegerField(null=True,)
    form_factor = models.CharField(null=True,max_length=200)
    width = models.IntegerField(null=True,)
    height = models.CharField(null=True,max_length=200)
    socket = models.CharField(null=True,max_length=200)
    chipset = models.CharField(null=True,max_length=200)
    built_in_cpu = models.BooleanField(null=True,)
    title_built_in_cpu = models.CharField(null=True,max_length=200)
    memory_slots_amount = models.IntegerField(null=True,)
    memory_type = models.CharField(null=True,max_length=200)
    ram_freq = models.CharField(null=True,max_length=200)
    max_memory = models.IntegerField(null=True,)
    memory_channels_amount = models.IntegerField(null=True,)
    memory_form_factor = models.CharField(null=True,max_length=200)
    m2_slots_amount = models.IntegerField(null=True,)
    sata_slots_amount = models.IntegerField(null=True,)
    nvme_support = models.BooleanField(null=True,)
    sata_raid_mode = models.CharField(null=True,max_length=200)
    m2_slots = models.CharField(null=True,max_length=200)
    m2_form_factor = models.CharField(null=True,max_length=200)
    other_drive_slots = models.CharField(null=True,max_length=200)
    pci_express_version = models.CharField(null=True,max_length=200)
    pci_e_x1_slots_amount = models.IntegerField(null=True,)
    pci_e_x16_slots_amount = models.IntegerField(null=True,)
    sli_crossfire_support = models.BooleanField(null=True,)
    other_expansion_slots = models.CharField(null=True,max_length=200)
    video_outputs = models.CharField(null=True,max_length=200)
    usb_amount_and_type = models.CharField(null=True,max_length=200)
    digital_and_audio_ports_s_pdif = models.CharField(null=True,max_length=200)
    other_slots_on_back_panel = models.CharField(null=True,max_length=200)
    network_ports_amount_rj45 = models.IntegerField(null=True,)
    fan_4pin_connectors = models.IntegerField(null=True,)
    internal_connectors_on_usb_plate_amount_and_type = models.CharField(null=True,max_length=200)
    cpu_cooler_power_slot = models.CharField(null=True,max_length=200)
    m2_e_key = models.BooleanField(null=True,)
    lpt_interface = models.BooleanField(null=True,)
    sound_adapter_chipset = models.CharField(null=True,max_length=200)
    sound_scheme = models.CharField(null=True,max_length=200)
    built_in_wifi_adapter = models.CharField(null=True,max_length=200)
    bluetooth = models.CharField(null=True,max_length=200)
    network_adapter_speed = models.CharField(null=True,max_length=200)
    network_adapter_chipset = models.CharField(null=True,max_length=200)
    power_phases_amount = models.IntegerField(null=True,)
    cpu_power_slot = models.CharField(null=True,max_length=200)
    passive_cooling = models.CharField(null=True,max_length=200)
    main_power_slot = models.CharField(null=True,max_length=200)
    illumination = models.BooleanField(null=True,)
    description = models.CharField(null=True,max_length=200)
    price = models.IntegerField(null=True,)
    rating = models.IntegerField(null=True,)
    rates = models.IntegerField(null=True,)


class RAM_DIMM(models.Model):
    warranty = models.CharField(null=True,max_length=200)
    country = models.CharField(null=True,max_length=200)
    title = models.CharField(null=True,max_length=200)
    year = models.IntegerField(null=True,)
    common_type = models.CharField(null=True,max_length=200)
    type_ddr = models.CharField(null=True,max_length=200)
    one_module_memory = models.IntegerField(null=True,)
    all_memory = models.IntegerField(null=True,)
    modules_amount = models.IntegerField(null=True,)
    ecc_memory = models.BooleanField(null=True,)
    rang = models.IntegerField(null=True,)
    register_memory = models.BooleanField(null=True,)
    freq = models.IntegerField(null=True,)
    intel_xpm_profiles = models.CharField(null=True,max_length=200)
    modes = models.IntegerField(null=True,)
    cas_latency_cl = models.FloatField(null=True,)
    ras_to_cas_delay_trcd = models.IntegerField(null=True,)
    row_precharge_delay_trp = models.IntegerField(null=True,)
    has_radiator = models.BooleanField(null=True,)
    illumination = models.BooleanField(null=True,)
    height = models.IntegerField(null=True,)
    radiator_color = models.CharField(null=True,max_length=200)
    low_profile = models.BooleanField(null=True,)
    power_voltage = models.FloatField(null=True,)
    description = models.CharField(null=True,max_length=200)
    price = models.IntegerField(null=True,)
    rating = models.IntegerField(null=True,)
    rates = models.IntegerField(null=True,)


class RAM_SO_DIMM(models.Model):
    warranty = models.CharField(null=True,max_length=200)
    country = models.CharField(null=True,max_length=200)
    title = models.CharField(null=True,max_length=200)
    common_type = models.CharField(null=True,max_length=200)
    type_ddr = models.CharField(null=True,max_length=200)
    one_module_memory = models.IntegerField(null=True,)
    all_memory = models.IntegerField(null=True,)
    modules_amount = models.IntegerField(null=True,)
    freq = models.IntegerField(null=True,)
    ras_to_cas_delay_trcd = models.IntegerField(null=True,)
    row_precharge_delay_trp = models.IntegerField(null=True,)
    cas_latency_cl = models.FloatField(null=True,)
    chips_amount = models.IntegerField(null=True,)
    double_sided_chips_setup = models.BooleanField(null=True,)
    power_voltage = models.FloatField(null=True,)
    description = models.CharField(null=True,max_length=200)
    price = models.IntegerField(null=True,)
    rating = models.IntegerField(null=True,)
    rates = models.IntegerField(null=True,)


class SSD(models.Model):
    warranty = models.IntegerField(null=True,)
    title = models.CharField(null=True,max_length=200)
    year = models.IntegerField(null=True,)
    ssd_type = models.CharField(null=True,max_length=200)
    memory = models.IntegerField(null=True,)
    phys_interface = models.CharField(null=True,max_length=200)
    bit_per_cell_amount = models.CharField(null=True,max_length=200)
    memory_structure = models.CharField(null=True,max_length=200)
    DRAM_buffer = models.BooleanField(null=True,)
    max_cons_reading_speed = models.IntegerField(null=True,)
    max_cons_writing_speed = models.IntegerField(null=True,)
    max_writing_resource_TBW = models.IntegerField(null=True,)
    DWPD = models.FloatField(null=True,)
    hardware_data_encryption = models.BooleanField(null=True,)
    width = models.IntegerField(null=True,)
    form_factor = models.BooleanField(null=True,)  # 2.5'' - 0, msata - 1
    description = models.CharField(null=True,max_length=200)
    price = models.IntegerField(null=True,)
    rating = models.IntegerField(null=True,)
    rates = models.IntegerField(null=True,)


class HDD35(models.Model):
    warranty = models.IntegerField(null=True,)
    country = models.CharField(null=True,max_length=200)
    title = models.CharField(null=True,max_length=200)
    year = models.IntegerField(null=True,)
    memory_bits = models.IntegerField(null=True,)
    rotation_speed = models.IntegerField(null=True,)
    cash_memory_bits = models.IntegerField(null=True,)
    raid_massives_optimization = models.BooleanField(null=True,)
    helium_fill = models.BooleanField(null=True,)
    noise_dba = models.IntegerField(null=True,)
    writing_tech_CMR_SMR = models.BooleanField(null=True,)  # cmr - 0, smr - 1
    position_park_cycles_amount = models.IntegerField(null=True,)
    width = models.IntegerField(null=True,)
    length = models.IntegerField(null=True,)
    height = models.IntegerField(null=True,)
    description = models.CharField(null=True,max_length=200)
    price = models.IntegerField(null=True,)
    rating = models.IntegerField(null=True,)
    rates = models.IntegerField(null=True,)


#class Upload(models.Model):
#    title = models.CharField(max_length=50, default="bbrruuhh.oooppp")
#    upload = models.FileField(upload_to="static/img/opinion/")


class Opinion(models.Model):
    user_id = models.IntegerField(null=True,)
    text = models.CharField(null=True,max_length=200)
    image = models.ImageField(null=True,upload_to=os.path.join(os.curdir, 'static/img/opinion'))
    pr_type = models.CharField(null=True,max_length=15)  # cpu gpu motherboard ramDIMM ramSODIMM ssd hdd
    pr_title = models.CharField(null=True,max_length=200)
